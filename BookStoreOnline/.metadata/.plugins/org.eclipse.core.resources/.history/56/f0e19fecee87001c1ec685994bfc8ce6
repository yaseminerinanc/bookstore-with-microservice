package com.example.billingservice.service.Impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;

import com.example.billingservice.dto.request.CreateAddressRequest;
import com.example.billingservice.dto.request.UpdateAddressRequest;
import com.example.billingservice.dto.response.GetAddressResponse;
import com.example.billingservice.entitiy.Address;
import com.example.billingservice.repository.AddressRepository;
import com.example.billingservice.service.AddressService;
import com.example.common.util.CommonUtilityMethods;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Optional;

public class AddressServiceImpl implements AddressService {
	
	   @Autowired
	    AddressRepository addressRepository;

	@Override
	public void createAddress(CreateAddressRequest createAddressRequest) {
		
		 Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
	        String userIdFromToken = CommonUtilityMethods.getUserIdFromToken(authentication);

	        Address address = Address.builder()
	                .addressLine1(createAddressRequest.getAddressLine1())
	                .addressLine2(createAddressRequest.getAddressLine2())
	                .city(createAddressRequest.getCity())
	                .country(createAddressRequest.getCountry())
	                .phone(createAddressRequest.getPhone())
	                .postalCode(createAddressRequest.getPostalCode())
	                .state(createAddressRequest.getState())
	                .userId(userIdFromToken)
	                .build();

	        addressRepository.save(addressDao);
		
	}

	@Override
	public List<GetAddressResponse> getAddress() {
	
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String userIdFromToken = CommonUtilityMethods.getUserIdFromToken(authentication);

        Optional<List<AddressDao>> addresses = addressRepository
                .findByUserId(userIdFromToken);

        List<GetAddressResponse> responseList = new ArrayList<>();

        if (addresses.isPresent()) {
            addresses.get().forEach(address -> {
                responseList.add(GetAddressResponse.builder()
                        .addressId(address.getAddressId())
                        .addressLine1(address.getAddressLine1())
                        .addressLine2(address.getAddressLine2())
                        .city(address.getCity())
                        .country(address.getCountry())
                        .phone(address.getPhone())
                        .postalCode(address.getPostalCode())
                        .state(address.getState())
                        .userId(address.getUserId())
                        .build());
            });

            return responseList;
        }

        return new ArrayList<>();
	}

	@Override
	public void updateAddress(UpdateAddressRequest updateAddressRequest) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public GetAddressResponse getAddressById(String addressId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void deleteAddressById(String addressId) {
		// TODO Auto-generated method stub
		
	}

}
