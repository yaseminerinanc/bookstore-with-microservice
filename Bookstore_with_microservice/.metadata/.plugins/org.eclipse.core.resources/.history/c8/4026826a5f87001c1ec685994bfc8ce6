package com.example.orderservice.service.Impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.feign.AccountFeignClient;
import com.example.feign.CatalogFeignClient;
import com.example.orderservice.dto.request.CartItemRequest;
import com.example.orderservice.entity.CartItem;
import com.example.orderservice.repository.CartItemRepository;
import com.example.orderservice.service.CartItemService;
import com.example.orderservice.service.CartService;

@Service
public class CartItemServiceImpl implements CartItemService {

    @Autowired
    CartService cartService;

    @Autowired
    CatalogFeignClient catalogFeignClient;

    @Autowired
    CartItemRepository cartItemRepository;

    @Autowired
    AccountFeignClient accountFeignClient;

	@Override
	public void addCartItem(CartItemRequest cartItemRequest) {
		  Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
	        String userName = (String) authentication.getPrincipal();
	        Cart cartByUserName = cartService.getCartByUserName(userName);

	        synchronized (CartServiceImpl.class) {
	            if (cartByUserName == null) {
	                //create cart for user if not exists.
	                cartService.createCart();
	                cartByUserName = cartService.getCartByUserName(userName);
	            }
	        }
	    
	        GetProductResponse getProductResponse = catalogFeignClient.getProduct(cartItemRequest.getProductId());

	        if (cartItemRequest.getQuantity() > getProductResponse.getAvailableItemCount()) {
	            throw new RuntimeException("Quantity is greater than available item count!");
	        }

	        //If the product already exists in the cart, update its quantity and itemPrice.

	        if (cartByUserName.getCartItems() != null) {
	            for (CartItem ci : cartByUserName.getCartItems()) {
	    
	                if (getProductResponse.getProductId().equals(ci.getProductId())) {
	                    ci.setQuantity(cartItemRequest.getQuantity());
	                    ci.setItemPrice(getProductResponse.getPrice());
	                    ci.setExtendedPrice(ci.getQuantity() * getProductResponse.getPrice());
	                    cartItemRepository.save(ci);
	                    return;
	                }
	            }
	        }

	        //If cart doesn't have any cartItems, then create cartItems.
	        CartItem cartItem = CartItem.builder()
	                                    .cart(cartByUserName)
	                                    .itemPrice(getProductResponse.getPrice())
	                                    .extendedPrice(cartItemRequest.getQuantity() * getProductResponse.getPrice())
	                                    .quantity(cartItemRequest.getQuantity())
	                                    .productId(getProductResponse.getProductId())
	                                    .productName(getProductResponse.getProductName())
	                                    .build();

	        cartItemRepository.save(cartItem);
		
	}

	@Override
	public void removeCartItem(String cartItemId) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public CartItem getCartItem(String cartItemId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void removeAllCartItems(String cartId) {
		// TODO Auto-generated method stub
		
	}
}