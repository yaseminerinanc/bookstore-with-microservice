package com.example.catalogservice.service.Impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.oauth2.provider.OAuth2Authentication;

import com.example.catalogservice.dto.request.CreateOrUpdateReviewRequest;
import com.example.catalogservice.dto.response.ProductResponse;
import com.example.catalogservice.entity.Review;
import com.example.catalogservice.repository.ReviewRepository;
import com.example.catalogservice.service.ProductService;
import com.example.catalogservice.service.ReviewService;
import com.example.feign.AccountFeignClient;

public class ReviewServiceImpl implements ReviewService {
	
    @Autowired
    ReviewRepository reviewRepository;

    @Autowired
    AccountFeignClient accountFeignClient;

    @Autowired
    ProductService productService;

	@Override
	public void createOrUpdateReview(CreateOrUpdateReviewRequest createOrUpdateReviewRequest) {
		 Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
	        String userIdFromToken = getUserIdFromToken(authentication);
	        String userNameFromToken = getUserNameFromToken(authentication);

	        //check whether product exists.
	        ProductResponse product = productService.getProduct(createOrUpdateReviewRequest.getProductId());
	        if (product == null) {
	            throw new RuntimeException("Product doesn't exist!");
	        }

	        Optional<Review> review = reviewRepository.findByUserIdAndProductId(userIdFromToken, createOrUpdateReviewRequest.getProductId());

	        if (review.isPresent()) {
	            Review updatedReview = review.get();
	            updatedReview.setRatingValue(createOrUpdateReviewRequest.getRatingValue());
	            updatedReview.setReviewMessage(createOrUpdateReviewRequest.getReviewMessage());
	            reviewRepository.save(updatedReview);
	        } else {
	            Review newReview = Review.builder()
	                    .reviewMessage(createOrUpdateReviewRequest.getReviewMessage())
	                    .ratingValue(createOrUpdateReviewRequest.getRatingValue())
	                    .userId(userIdFromToken)
	                    .userName(userNameFromToken)
	                    .productId(createOrUpdateReviewRequest.getProductId())
	                    .build();
	            reviewRepository.save(newReview);
	        }
		
	}

	@Override
	public List<Review> getReviewsForProduct(String productId) {
		 Optional<List<Review>> reviewsForProduct = reviewRepository.findAllByProductId(productId);
	        return reviewsForProduct.orElseGet(ArrayList::new);

	}
	
	   public static String getUserIdFromToken(Authentication authentication) {
	        Map<String, String> map = (Map)((OAuth2Authentication) authentication).getUserAuthentication().getDetails();
	        return map.get("user_id");
	    }

	    public static String getUserNameFromToken(Authentication authentication) {
	        Map<String, String> map = (Map)((OAuth2Authentication) authentication).getUserAuthentication().getDetails();
	        return map.get("user_name");
	    }

}
